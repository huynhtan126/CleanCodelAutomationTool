<?xml version="1.0"?>
<doc>
  <assembly>
    <name>SharpAvi</name>
  </assembly>
  <members>
    <member name="T:SharpAvi.AudioFormats">
      <summary>
            Contains codes of some popular wave formats.
            </summary>
    </member>
    <member name="F:SharpAvi.AudioFormats.Unknown">
      <summary>
            Unknown format.
            </summary>
    </member>
    <member name="F:SharpAvi.AudioFormats.Pcm">
      <summary>
            Pulse-code modulation (PCM).
            </summary>
    </member>
    <member name="F:SharpAvi.AudioFormats.Mp3">
      <summary>
            MPEG Layer 3 (MP3).
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.CodecInfo">
      <summary>
            Information about a codec.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.CodecInfo.#ctor(SharpAvi.FourCC,System.String)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.CodecInfo" />.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.CodecInfo.Codec">
      <summary>Codec ID.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.CodecInfo.Name">
      <summary>
            Descriptive codec name that may be show to a user.
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.EncodingStreamFactory">
      <summary>
            Provides extension methods for creating encoding streams with specific encoders.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.EncodingStreamFactory.AddUncompressedVideoStream(SharpAvi.Output.AviWriter,System.Int32,System.Int32)">
      <summary>
            Adds new video stream with <see cref="T:SharpAvi.Codecs.UncompressedVideoEncoder" />.
            </summary>
      <seealso cref="M:SharpAvi.Output.AviWriter.AddEncodingVideoStream(SharpAvi.Codecs.IVideoEncoder,System.Boolean,System.Int32,System.Int32)" />
      <seealso cref="T:SharpAvi.Codecs.UncompressedVideoEncoder" />
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <requires csharp="width &gt; 0" vb="width &gt; 0">width &gt; 0</requires>
      <requires csharp="height &gt; 0" vb="height &gt; 0">height &gt; 0</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.EncodingStreamFactory.AddMotionJpegVideoStream(SharpAvi.Output.AviWriter,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adds new video stream with <see cref="T:SharpAvi.Codecs.MotionJpegVideoEncoderWpf" />.
            </summary>
      <param name="writer">Writer object to which new stream is added.</param>
      <param name="width">Frame width.</param>
      <param name="height">Frame height.</param>
      <param name="quality">Requested quality of compression.</param>
      <param name="forceSingleThreadedAccess">
            When <c>true</c>, the created <see cref="T:SharpAvi.Codecs.MotionJpegVideoEncoderWpf" /> instance is wrapped into
            <see cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" />.
            </param>
      <seealso cref="M:SharpAvi.Output.AviWriter.AddEncodingVideoStream(SharpAvi.Codecs.IVideoEncoder,System.Boolean,System.Int32,System.Int32)" />
      <seealso cref="T:SharpAvi.Codecs.MotionJpegVideoEncoderWpf" />
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1 local_2 = new SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1();&#xD;&#xA;        local_2.width = width;&#xD;&#xA;        local_2.height = height;&#xD;&#xA;        local_2.quality = quality;&#xD;&#xA;    }&#xD;&#xA;    return writer != null; })()" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1 local_2 = New SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    local_2.width = width&#xD;&#xA;    local_2.height = height&#xD;&#xA;    local_2.quality = quality&#xD;&#xA;    return writer &lt;&gt; Nothing; })()">(() =&gt; {
    {
        SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1 local_2 = new SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass1();
        local_2.width = width;
        local_2.height = height;
        local_2.quality = quality;
    }
    return writer != null; })()</requires>
      <requires csharp="local_2.width &gt; 0" vb="local_2.width &gt; 0">local_2.width &gt; 0</requires>
      <requires csharp="local_2.height &gt; 0" vb="local_2.height &gt; 0">local_2.height &gt; 0</requires>
      <requires csharp="1 &lt;= local_2.quality &amp;&amp; !(local_2.quality &gt; 100)" vb="1 &lt;= local_2.quality AndAlso Not local_2.quality &gt; 100">1 &lt;= local_2.quality &amp;&amp; !(local_2.quality &gt; 100)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.EncodingStreamFactory.AddMpeg4VideoStream(SharpAvi.Output.AviWriter,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Nullable{SharpAvi.FourCC},System.Boolean)">
      <summary>
            Adds new video stream with <see cref="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm" />.
            </summary>
      <param name="writer">Writer object to which new stream is added.</param>
      <param name="width">Frame width.</param>
      <param name="height">Frame height.</param>
      <param name="fps">Frames rate of the video.</param>
      <param name="frameCount">Number of frames if known in advance. Otherwise, specify <c>0</c>.</param>
      <param name="quality">Requested quality of compression.</param>
      <param name="codec">Specific MPEG-4 codec to use.</param>
      <param name="forceSingleThreadedAccess">
            When <c>true</c>, the created <see cref="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm" /> instance is wrapped into
            <see cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" />.
            </param>
      <seealso cref="M:SharpAvi.Output.AviWriter.AddEncodingVideoStream(SharpAvi.Codecs.IVideoEncoder,System.Boolean,System.Int32,System.Int32)" />
      <seealso cref="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm" />
      <seealso cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" />
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5 local_2 = new SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5();&#xD;&#xA;        local_2.width = width;&#xD;&#xA;        local_2.height = height;&#xD;&#xA;        local_2.fps = fps;&#xD;&#xA;        local_2.frameCount = frameCount;&#xD;&#xA;        local_2.quality = quality;&#xD;&#xA;        local_2.codec = codec;&#xD;&#xA;    }&#xD;&#xA;    return writer != null; })()" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5 local_2 = New SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5();&#xD;&#xA;    local_2.width = width&#xD;&#xA;    local_2.height = height&#xD;&#xA;    local_2.fps = fps&#xD;&#xA;    local_2.frameCount = frameCount&#xD;&#xA;    local_2.quality = quality&#xD;&#xA;    local_2.codec = codec&#xD;&#xA;    return writer &lt;&gt; Nothing; })()">(() =&gt; {
    {
        SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5 local_2 = new SharpAvi.Codecs.EncodingStreamFactory.&lt;&gt;c__DisplayClass5();
        local_2.width = width;
        local_2.height = height;
        local_2.fps = fps;
        local_2.frameCount = frameCount;
        local_2.quality = quality;
        local_2.codec = codec;
    }
    return writer != null; })()</requires>
      <requires csharp="local_2.width &gt; 0" vb="local_2.width &gt; 0">local_2.width &gt; 0</requires>
      <requires csharp="local_2.height &gt; 0" vb="local_2.height &gt; 0">local_2.height &gt; 0</requires>
      <requires csharp="local_2.fps &gt; 0.0" vb="local_2.fps &gt; 0">local_2.fps &gt; 0.0</requires>
      <requires csharp="local_2.frameCount &gt;= 0" vb="local_2.frameCount &gt;= 0">local_2.frameCount &gt;= 0</requires>
      <requires csharp="1 &lt;= local_2.quality &amp;&amp; !(local_2.quality &gt; 100)" vb="1 &lt;= local_2.quality AndAlso Not local_2.quality &gt; 100">1 &lt;= local_2.quality &amp;&amp; !(local_2.quality &gt; 100)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.EncodingStreamFactory.AddMp3AudioStream(SharpAvi.Output.AviWriter,System.Int32,System.Int32,System.Int32)">
      <summary>
            Adds new audio stream with <see cref="T:SharpAvi.Codecs.Mp3AudioEncoderLame" />.
            </summary>
      <seealso cref="M:SharpAvi.Output.AviWriter.AddEncodingAudioStream(SharpAvi.Codecs.IAudioEncoder,System.Boolean)" />
      <seealso cref="T:SharpAvi.Codecs.Mp3AudioEncoderLame" />
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <requires csharp="channelCount == 1 || channelCount == 2" vb="channelCount = 1 OrElse channelCount = 2">channelCount == 1 || channelCount == 2</requires>
      <requires csharp="sampleRate &gt; 0" vb="sampleRate &gt; 0">sampleRate &gt; 0</requires>
      <requires csharp="Contains&lt;int&gt;(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)" vb="Contains(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)">System.Linq.Enumerable.Contains&lt;int&gt;(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:SharpAvi.Codecs.IAudioEncoder">
      <summary>
            Encoder of audio streams.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.IAudioEncoder.GetMaxEncodedLength(System.Int32)">
      <summary>
            Gets the maximum number of bytes in encoded data for a given number of source bytes.
            </summary>
      <param name="sourceCount">Number of source bytes. Specify <c>0</c> for a flush buffer size.</param>
      <seealso cref="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <seealso cref="M:SharpAvi.Codecs.IAudioEncoder.Flush(System.Byte[],System.Int32)" />
      <requires csharp="sourceCount &gt;= 0" vb="sourceCount &gt;= 0">sourceCount &gt;= 0</requires>
      <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encodes block of audio data.
            </summary>
      <param name="source">Buffer with audio data.</param>
      <param name="sourceOffset">Offset to start reading <paramref name="source" />.</param>
      <param name="sourceCount">Number of bytes to read from <paramref name="source" />.</param>
      <param name="destination">Buffer for encoded audio data.</param>
      <param name="destinationOffset">Offset to start writing to <paramref name="destination" />.</param>
      <returns>The number of bytes written to <paramref name="destination" />.</returns>
      <seealso cref="M:SharpAvi.Codecs.IAudioEncoder.GetMaxEncodedLength(System.Int32)" />
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="sourceOffset &gt;= 0" vb="sourceOffset &gt;= 0">sourceOffset &gt;= 0</requires>
      <requires csharp="sourceCount &gt;= 0" vb="sourceCount &gt;= 0">sourceCount &gt;= 0</requires>
      <requires csharp="sourceOffset + sourceCount &lt;= source.Length" vb="sourceOffset + sourceCount &lt;= source.Length">sourceOffset + sourceCount &lt;= source.Length</requires>
      <requires csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires csharp="destinationOffset &gt;= 0" vb="destinationOffset &gt;= 0">destinationOffset &gt;= 0</requires>
      <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.IAudioEncoder.Flush(System.Byte[],System.Int32)">
      <summary>
            Flushes internal encoder buffers if any.
            </summary>
      <param name="destination">Buffer for encoded audio data.</param>
      <param name="destinationOffset">Offset to start writing to <paramref name="destination" />.</param>
      <returns>The number of bytes written to <paramref name="destination" />.</returns>
      <seealso cref="M:SharpAvi.Codecs.IAudioEncoder.GetMaxEncodedLength(System.Int32)" />
      <requires csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires csharp="destinationOffset &gt;= 0" vb="destinationOffset &gt;= 0">destinationOffset &gt;= 0</requires>
      <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.ChannelCount">
      <summary>
            Number of channels in encoded audio.
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.SamplesPerSecond">
      <summary>
            Sample rate of encoded audio, in samples per second.
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.BitsPerSample">
      <summary>
            Number of bits per sample per single channel in encoded audio (usually 8 or 16).
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.Format">
      <summary>
            Format of encoded audio.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.BytesPerSecond">
      <summary>
            Byte rate of encoded audio, in bytes per second.
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.Granularity">
      <summary>
            Size in bytes of minimum item of encoded data.
            </summary>
      <remarks>
            Corresponds to <c>nBlockAlign</c> field of <c>WAVEFORMATEX</c> structure.
            </remarks>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.IAudioEncoder.FormatSpecificData">
      <summary>
            Extra data defined by a specific format which should be added to the stream header.
            </summary>
      <remarks>
            Contains data of specific structure like <c>MPEGLAYER3WAVEFORMAT</c> that follow
            common <c>WAVEFORMATEX</c> field.
            </remarks>
    </member>
    <member name="T:SharpAvi.Codecs.Mp3AudioEncoderLame">
      <summary>
            Mpeg Layer 3 (MP3) audio encoder using the LAME codec in external DLL.
            </summary>
      <remarks>
            The class is designed for using only a single instance at a time.
            Find information about and downloads of the LAME project at http://lame.sourceforge.net/
            </remarks>
    </member>
    <member name="F:SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates">
      <summary>
            Supported output bit rates (in kilobits per second).
            </summary>
      <remarks>
            Currently supported are 64, 96, 128, 160, 192 and 320 kbps.
            </remarks>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.SetLameDllLocation(System.String)">
      <summary>
            Sets the location of LAME DLL for using by this class.
            </summary>
      <remarks>
            This method may be called before creating any instances of this class.
            The LAME DLL should have the appropriate bitness (32/64), depending on the current process.
            If it is not already loaded into the process, the method loads it automatically.
            </remarks>
      <requires csharp="!IsNullOrEmpty(lameDllPath)" vb="Not IsNullOrEmpty(lameDllPath)">!string.IsNullOrEmpty(lameDllPath)</requires>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.Mp3AudioEncoderLame" />.
            </summary>
      <param name="channelCount">Channel count.</param>
      <param name="sampleRate">Sample rate (in samples per second).</param>
      <param name="outputBitRateKbps">Output bit rate (in kilobits per second).</param>
      <remarks>
            Encoder expects audio data in 16-bit samples.
            Stereo data should be interleaved: left sample first, right sample second.
            </remarks>
      <requires csharp="channelCount == 1 || channelCount == 2" vb="channelCount = 1 OrElse channelCount = 2">channelCount == 1 || channelCount == 2</requires>
      <requires csharp="sampleRate &gt; 0" vb="sampleRate &gt; 0">sampleRate &gt; 0</requires>
      <requires csharp="Contains&lt;int&gt;(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)" vb="Contains(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)">System.Linq.Enumerable.Contains&lt;int&gt;(SharpAvi.Codecs.Mp3AudioEncoderLame.SupportedBitRates, outputBitRateKbps)</requires>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.Dispose">
      <summary>
            Releases resources.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encodes block of audio data.
            </summary>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="sourceOffset &gt;= 0" vb="sourceOffset &gt;= 0">sourceOffset &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="sourceCount &gt;= 0" vb="sourceCount &gt;= 0">sourceCount &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="sourceOffset + sourceCount &lt;= source.Length" vb="sourceOffset + sourceCount &lt;= source.Length">sourceOffset + sourceCount &lt;= source.Length</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="destinationOffset &gt;= 0" vb="destinationOffset &gt;= 0">destinationOffset &gt;= 0</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.EncodeBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.Flush(System.Byte[],System.Int32)">
      <summary>
            Flushes internal encoder's buffers.
            </summary>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.Flush(System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.Flush(System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="destinationOffset &gt;= 0" vb="destinationOffset &gt;= 0">destinationOffset &gt;= 0</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.Flush(System.Byte[],System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.GetMaxEncodedLength(System.Int32)">
      <summary>
            Gets maximum length of encoded data.
            </summary>
      <requires inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.GetMaxEncodedLength(System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="sourceCount &gt;= 0" vb="sourceCount &gt;= 0">sourceCount &gt;= 0</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.GetMaxEncodedLength(System.Int32)" inheritedFromTypeName="IAudioEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ChannelCount">
      <summary>
            Number of audio channels.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.get_ChannelCount" inheritedFromTypeName="IAudioEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.SamplesPerSecond">
      <summary>
            Sample rate.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.get_SamplesPerSecond" inheritedFromTypeName="IAudioEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.BitsPerSample">
      <summary>
            Bits per sample per single channel.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.get_BitsPerSample" inheritedFromTypeName="IAudioEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.Format">
      <summary>
            Audio format.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.BytesPerSecond">
      <summary>
            Byte rate of the stream.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.get_BytesPerSecond" inheritedFromTypeName="IAudioEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.Granularity">
      <summary>
            Minimum amount of data.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IAudioEncoder.get_Granularity" inheritedFromTypeName="IAudioEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.FormatSpecificData">
      <summary>
            Format-specific data.
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade">
      <summary>
            Interface is used to access the API of the LAME DLL.
            </summary>
      <remarks>
            Clients of <see cref="T:SharpAvi.Codecs.Mp3AudioEncoderLame" /> class need not to work with
            this interface directly.
            </remarks>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.PrepareEncoding">
      <summary>
            Initializes the encoding process.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encodes a chunk of audio data.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.FinishEncoding(System.Byte[],System.Int32)">
      <summary>
            Finalizes the encoding process.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.ChannelCount">
      <summary>
            Number of audio channels.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.InputSampleRate">
      <summary>
            Sample rate of source audio data.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.OutputBitRate">
      <summary>
            Bit rate of encoded data.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.OutputSampleRate">
      <summary>
            Sample rate of encoded data.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.FrameSize">
      <summary>
            Frame size of encoded data.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mp3AudioEncoderLame.ILameFacade.EncoderDelay">
      <summary>
            Encoder delay.
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm">
      <summary>
            Encodes video stream in MPEG-4 format using one of VCM codecs installed on the system.
            </summary>
      <remarks>
        <para>
            Supported codecs include Microsoft MPEG-4 V3 and V2, Xvid, DivX and x264vfw.
            The codec to be used is selected from the ones installed on the system.
            The encoder can be forced to use MPEG-4 codecs that are not explicitly supported. However, in this case
            it is not guaranteed to work properly.
            </para>
        <para>
            For <c>x264vfw</c> codec, it is recommended to enable <c>Zero Latency</c> option in its settings.
            64-bit support is limited, as there are no 64-bit versions of Microsoft and DivX codecs, 
            and Xvid can produce some errors.
            </para>
        <para>
            In multi-threaded scenarios, like asynchronous encoding, it is recommended to wrap this encoder into
            <see cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" /> for the stable work.
            </para>
      </remarks>
    </member>
    <member name="T:SharpAvi.Codecs.IVideoEncoder">
      <summary>
            Encoder for video AVI stream.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)">
      <summary>
            Encodes video frame.
            </summary>
      <param name="source">
            Frame bitmap data. The expected bitmap format is BGR32 top-to-bottom. Alpha component is not used.
            </param>
      <param name="srcOffset">
            Start offset of the frame data in the <paramref name="source" />.
            Expected length of the data is determined by the parameters specified when instantinating the encoder.
            </param>
      <param name="destination">
            Buffer for storing the encoded frame data.
            </param>
      <param name="destOffset">
            Start offset of the encoded data in the <paramref name="destination" /> buffer.
            There should be enough space till the end of the buffer, see <see cref="P:SharpAvi.Codecs.IVideoEncoder.MaxEncodedSize" />.
            </param>
      <param name="isKeyFrame">
            When the method returns, contains the value indicating whether this frame was encoded as a key frame.
            </param>
      <returns>
            The actual number of bytes written to the <paramref name="destination" /> buffer.
            </returns>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="source.Length &gt; 0" vb="source.Length &gt; 0">source.Length &gt; 0</requires>
      <requires csharp="0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length" vb="0 &lt;= srcOffset AndAlso srcOffset &lt; source.Length">0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length</requires>
      <requires csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires csharp="0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)" vb="0 &lt;= destOffset AndAlso Not destOffset + Me.MaxEncodedSize &gt; destination.Length">0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)</requires>
      <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.IVideoEncoder.Codec">
      <summary>Codec ID.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.IVideoEncoder.BitsPerPixel">
      <summary>
            Number of bits per pixel in encoded image.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.IVideoEncoder.MaxEncodedSize">
      <summary>
            Determines the amount of space needed in the destination buffer for storing the encoded data of a single frame.
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.GetAvailableCodecs">
      <summary>
            Gets info about the supported codecs that are installed on the system.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.#ctor(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,SharpAvi.FourCC[])">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm" />.
            </summary>
      <param name="width">Frame width.</param>
      <param name="height">Frame height.</param>
      <param name="fps">Frame rate.</param>
      <param name="frameCount">
            Number of frames to be encoded.
            If not known, specify 0.
            </param>
      <param name="quality">
            Compression quality in the range [1..100].
            Less values mean less size and lower image quality.
            </param>
      <param name="codecPreference">
            List of codecs that can be used by this encoder, in preferred order.
            </param>
      <exception cref="T:System.InvalidOperationException">
            No compatible codec was found in the system.
            </exception>
      <remarks>
        <para>
            It is not guaranteed that the codec will respect the specified <paramref name="quality" /> value.
            This depends on its implementation.
            </para>
        <para>
            If no preferred codecs are specified, then <see cref="P:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.DefaultCodecPreference" /> is used.
            MPEG-4 codecs that are not explicitly supported can be specified. However, in this case
            the encoder is not guaranteed to work properly.
            </para>
      </remarks>
      <requires csharp="width &gt; 0" vb="width &gt; 0">width &gt; 0</requires>
      <requires csharp="height &gt; 0" vb="height &gt; 0">height &gt; 0</requires>
      <requires csharp="fps &gt; 0.0" vb="fps &gt; 0">fps &gt; 0.0</requires>
      <requires csharp="frameCount &gt;= 0" vb="frameCount &gt;= 0">frameCount &gt;= 0</requires>
      <requires csharp="1 &lt;= quality &amp;&amp; !(quality &gt; 100)" vb="1 &lt;= quality AndAlso Not quality &gt; 100">1 &lt;= quality &amp;&amp; !(quality &gt; 100)</requires>
    </member>
    <member name="M:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.Finalize">
      <summary>
            Performs any necessary cleanup before this instance is garbage-collected.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)">
      <summary>Encodes a frame.</summary>
      <seealso cref="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" />
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source.Length &gt; 0" vb="source.Length &gt; 0">source.Length &gt; 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length" vb="0 &lt;= srcOffset AndAlso srcOffset &lt; source.Length">0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)" vb="0 &lt;= destOffset AndAlso Not destOffset + Me.MaxEncodedSize &gt; destination.Length">0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="M:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.Dispose">
      <summary>
            Releases all unmanaged resources used by the encoder.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.DefaultCodecPreference">
      <summary>
            Default preferred order of the supported codecs.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.Codec">
      <summary>Video codec.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.BitsPerPixel">
      <summary>Number of bits per pixel in the encoded image.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.Mpeg4VideoEncoderVcm.MaxEncodedSize">
      <summary>
            Maximum size of the encoded frame.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.get_MaxEncodedSize" inheritedFromTypeName="IVideoEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper">
      <summary>
            Ensures that all access to the enclosed <see cref="T:SharpAvi.Codecs.IVideoEncoder" /> instance is made
            on a single thread.
            </summary>
      <remarks>
        <para>
            Especially useful for unmanaged encoders like <see cref="T:SharpAvi.Codecs.Mpeg4VideoEncoderVcm" /> in multi-threaded scenarios
            like asynchronous encoding.
            </para>
        <para>
            Uses <see cref="T:System.Windows.Threading.Dispatcher" /> under the hood.
            </para>
      </remarks>
    </member>
    <member name="M:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.#ctor(System.Func{SharpAvi.Codecs.IVideoEncoder})">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" />.
            </summary>
      <param name="encoderFactory">
            Factory for creating an encoder instance.
            It will be invoked on the same thread as all subsequent operations of the <see cref="T:SharpAvi.Codecs.IVideoEncoder" /> interface.
            </param>
      <requires csharp="encoderFactory != null" vb="encoderFactory &lt;&gt; Nothing">encoderFactory != null</requires>
    </member>
    <member name="M:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.Dispose">
      <summary>
            Disposes the enclosed encoder and stops the internal thread.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)">
      <summary>
            Encodes video frame.
            </summary>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source.Length &gt; 0" vb="source.Length &gt; 0">source.Length &gt; 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length" vb="0 &lt;= srcOffset AndAlso srcOffset &lt; source.Length">0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)" vb="0 &lt;= destOffset AndAlso Not destOffset + Me.MaxEncodedSize &gt; destination.Length">0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.Codec">
      <summary>Codec ID.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.BitsPerPixel">
      <summary>
            Number of bits per pixel in encoded image.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper.MaxEncodedSize">
      <summary>
            Determines the amount of space needed in the destination buffer for storing the encoded data of a single frame.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.get_MaxEncodedSize" inheritedFromTypeName="IVideoEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="T:SharpAvi.Codecs.UncompressedVideoEncoder">
      <summary>
            Encodes frames in BGR24 format without compression.
            </summary>
      <remarks>
            The main purpose of this encoder is to flip bitmap vertically (from top-down to bottom-up)
            and to convert pixel format to 24 bits.
            </remarks>
    </member>
    <member name="M:SharpAvi.Codecs.UncompressedVideoEncoder.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.UncompressedVideoEncoder" />.
            </summary>
      <param name="width">Frame width.</param>
      <param name="height">Frame height.</param>
      <requires csharp="width &gt; 0" vb="width &gt; 0">width &gt; 0</requires>
      <requires csharp="height &gt; 0" vb="height &gt; 0">height &gt; 0</requires>
    </member>
    <member name="M:SharpAvi.Codecs.UncompressedVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)">
      <summary>
            Encodes a frame.
            </summary>
      <seealso cref="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" />
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source.Length &gt; 0" vb="source.Length &gt; 0">source.Length &gt; 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length" vb="0 &lt;= srcOffset AndAlso srcOffset &lt; source.Length">0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)" vb="0 &lt;= destOffset AndAlso Not destOffset + Me.MaxEncodedSize &gt; destination.Length">0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.UncompressedVideoEncoder.Codec">
      <summary>Video codec.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.UncompressedVideoEncoder.BitsPerPixel">
      <summary>
            Number of bits per pixel in encoded image.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.UncompressedVideoEncoder.MaxEncodedSize">
      <summary>
            Maximum size of encoded frame.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.get_MaxEncodedSize" inheritedFromTypeName="IVideoEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="T:SharpAvi.Index1Entry">
      <summary>
            Entry of AVI v1 index.
            </summary>
    </member>
    <member name="T:SharpAvi.AviUtils">
      <summary>
            Auxiliary methods helping to deal with AVI files.
            </summary>
    </member>
    <member name="M:SharpAvi.AviUtils.SplitFrameRate(System.Decimal,System.UInt32@,System.UInt32@)">
      <summary>
            Splits frame rate value to integer <c>rate</c> and <c>scale</c> values used in some AVI headers
            and VfW APIs.
            </summary>
      <param name="frameRate">
            Frame rate. Rounded to 3 fractional digits.
            </param>
      <param name="rate">
            When the method returns, contains rate value.
            </param>
      <param name="scale">
            When the method returns, contains scale value.
            </param>
    </member>
    <member name="T:SharpAvi.Output.AsyncAudioStreamWrapper">
      <summary>
            Adds asynchronous writes support for underlying stream.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.AudioStreamWrapperBase">
      <summary>
            Base class for wrappers around <see cref="T:SharpAvi.Output.IAviAudioStreamInternal" />.
            </summary>
      <remarks>
            Simply delegates all operations to wrapped stream.
            </remarks>
    </member>
    <member name="T:SharpAvi.Output.IAviAudioStream">
      <summary>
            Audio stream of AVI file.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.IAviStream">
      <summary>
            A stream of AVI files.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.IAviStream.Index">
      <summary>
            Serial number of this stream in AVI file.
            </summary>
      <getter>
        <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Output.IAviStream.Name">
      <summary>Name of the stream.</summary>
      <remarks>May be used by some players when displaying the list of available streams.</remarks>
    </member>
    <member name="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a block of audio data.
            </summary>
      <param name="data">Data buffer.</param>
      <param name="startIndex">Start index of data.</param>
      <param name="length">Length of data.</param>
      <remarks>
            Division of audio data into blocks may be arbitrary.
            However, it is reasonable to write blocks of approximately the same duration
            as a single video frame.
            </remarks>
      <requires csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronously writes a block to the stream.
            </summary>
      <param name="data">Data buffer.</param>
      <param name="startIndex">Start index of data.</param>
      <param name="length">Length of data.</param>
      <param name="userCallback">Callback to be invoked after asynchronous operation ends.</param>
      <param name="stateObject">User object that will be passed to <paramref name="userCallback" />.</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> object representing this asynchronous operation.</returns>
      <remarks>
            Division of audio data into blocks may be arbitrary.
            However, it is reasonable to write blocks of approximately the same duration
            as a single video frame.
            The contents of <paramref name="data" /> should not be modified until this write operation ends.
            </remarks>
      <seealso cref="M:SharpAvi.Output.IAviAudioStream.EndWriteBlock(System.IAsyncResult)" />
      <requires csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.IAviAudioStream.EndWriteBlock(System.IAsyncResult)">
      <summary>
            Waits for asynchronous write operation to complete.
            </summary>
      <seealso cref="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <requires csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.ChannelCount">
      <summary>
            Number of channels in this audio stream.
            </summary>
      <remarks>
            For example, <c>1</c> for mono and <c>2</c> for stereo.
            </remarks>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.SamplesPerSecond">
      <summary>
            Sample rate, in samples per second (herz).
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.BitsPerSample">
      <summary>
            Number of bits per sample per single channel (usually 8 or 16).
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.Format">
      <summary>
            Format of the audio data.
            </summary>
      <remarks>
            The formats are defined in <c>mmreg.h</c> from Windows SDK.
            Some of the well-known formats are listed in the <see cref="T:SharpAvi.AudioFormats" /> class.
            </remarks>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.BytesPerSecond">
      <summary>
            Average byte rate of the stream.
            </summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.Granularity">
      <summary>
            Size in bytes of minimum item of data in the stream.
            </summary>
      <remarks>
            Corresponds to <c>nBlockAlign</c> field of <c>WAVEFORMATEX</c> structure.
            </remarks>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.FormatSpecificData">
      <summary>
            Extra data defined by a specific format which should be added to the stream header.
            </summary>
      <remarks>
            Contains data of specific structure like <c>MPEGLAYER3WAVEFORMAT</c> that follow
            common <c>WAVEFORMATEX</c> field.
            </remarks>
    </member>
    <member name="P:SharpAvi.Output.IAviAudioStream.BlocksWritten">
      <summary>
            Number of blocks written.
            </summary>
      <getter>
        <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="T:SharpAvi.Output.IAviStreamInternal">
      <summary>
            Interface of streams used for internal workings of <see cref="T:SharpAvi.Output.AviWriter" />.
            </summary>
    </member>
    <member name="M:SharpAvi.Output.IAviStreamInternal.PrepareForWriting">
      <summary>
            Prepares the stream for writing.
            </summary>
      <remarks>
            Called by <see cref="T:SharpAvi.Output.AviWriter" /> when writing starts. More exactly,
            on the first call to the <c>Write</c> method of any stream, before any data is actually written.
            </remarks>
    </member>
    <member name="M:SharpAvi.Output.IAviStreamInternal.FinishWriting">
      <summary>
            Finishes writing of the stream.
            </summary>
      <remarks>
            Called by <see cref="T:SharpAvi.Output.AviWriter" /> just before it closes (if writing had started).
            Allows to write a final data to the stream.
            This is not appropriate place for freeing resources, better to implement <see cref="T:System.IDisposable" />.
            All streams are disposed on disposing of <see cref="T:SharpAvi.Output.AviWriter" /> even if writing had not yet started.
            </remarks>
    </member>
    <member name="M:SharpAvi.Output.IAviStreamInternal.WriteHeader">
      <summary>
            Called to delegate writing of the stream header to a proper overload
            of <c>IAviStreamWriteHandler.WriteStreamHeader</c>.
            </summary>
    </member>
    <member name="M:SharpAvi.Output.IAviStreamInternal.WriteFormat">
      <summary>
            Called to delegate writing of the stream format to a proper overload
            of <c>IAviStreamWriteHandler.WriteStreamFormat</c>.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.IAviStreamInternal.StreamType">
      <summary>
            Stream type written in <c>AVISTREAMHEADER</c>.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.IAviStreamInternal.ChunkId">
      <summary>
            Chunk ID for stream data.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.AsyncVideoStreamWrapper">
      <summary>
            Adds asynchronous writes support for underlying stream.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.VideoStreamWrapperBase">
      <summary>
            Base class for wrappers around <see cref="T:SharpAvi.Output.IAviVideoStreamInternal" />.
            </summary>
      <remarks>
            Simply delegates all operations to wrapped stream.
            </remarks>
    </member>
    <member name="T:SharpAvi.Output.IAviVideoStream">
      <summary>
            Video stream of AVI file.
            </summary>
      <remarks>
            After the first invocation of <see cref="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" /> no properties of the stream can be changed.
            </remarks>
    </member>
    <member name="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a frame to the stream.</summary>
      <param name="isKeyFrame">Is this frame a key frame?</param>
      <param name="frameData">Array containing the frame data.</param>
      <param name="startIndex">Index of the first byte of the frame data.</param>
      <param name="length">Length of the frame data.</param>
      <requires csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronously writes a frame to the stream.
            </summary>
      <param name="isKeyFrame">Is this frame a key frame?</param>
      <param name="frameData">Array containing the frame data.</param>
      <param name="startIndex">Index of the first byte of the frame data.</param>
      <param name="length">Length of the frame data.</param>
      <param name="userCallback">Callback to be invoked after asynchronous operation ends.</param>
      <param name="stateObject">User object that will be passed to <paramref name="userCallback" />.</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> object representing this asynchronous operation.</returns>
      <remarks>
            The contents of <paramref name="frameData" /> should not be modified until this write operation ends.
            </remarks>
      <seealso cref="M:SharpAvi.Output.IAviVideoStream.EndWriteFrame(System.IAsyncResult)" />
      <requires csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.IAviVideoStream.EndWriteFrame(System.IAsyncResult)">
      <summary>
            Waits for asynchronous write operation to complete.
            </summary>
      <seealso cref="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <requires csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.IAviVideoStream.Width">
      <summary>Frame width.</summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviVideoStream.Height">
      <summary>Frame height.</summary>
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviVideoStream.BitsPerPixel">
      <summary>
            Number of bits per pixel in the frame's image.
            </summary>
      <setter>
        <requires csharp="IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)" vb="IsDefined(typeof(SharpAvi.BitsPerPixel), ((Object)value))">System.Enum.IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.IAviVideoStream.Codec">
      <summary>
            ID of the codec used to encode the stream contents.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.IAviVideoStream.FramesWritten">
      <summary>
            Number of frames written.
            </summary>
      <getter>
        <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.AviStreamBase.PrepareForWriting">
      <summary>
            Prepares the stream for writing.
            </summary>
      <remarks>
            Default implementation freezes properties of the stream (further modifications are not allowed).
            </remarks>
    </member>
    <member name="M:SharpAvi.Output.AviStreamBase.FinishWriting">
      <summary>
            Performs actions before closing the stream.
            </summary>
      <remarks>
            Default implementation does nothing.
            </remarks>
    </member>
    <member name="T:SharpAvi.Codecs.MotionJpegVideoEncoderWpf">
      <summary>
            Encodes frames in Motion JPEG format.
            </summary>
      <remarks>
        <para>
            The implementation relies on <see cref="T:System.Windows.Media.Imaging.JpegBitmapEncoder" />.
            </para>
        <para>
            Note for .NET 3.5:
            This encoder is designed for single-threaded use. If you use it in multi-threaded scenarios 
            (like asynchronous calls), then consider wrapping it in <see cref="T:SharpAvi.Codecs.SingleThreadedVideoEncoderWrapper" />.
            </para>
        <para>
            This encoder is not fully conformant to the Motion JPEG standard, as each encoded frame is a full JPEG picture 
            with its own Huffman tables, and not those fixed Huffman tables defined by the Motion JPEG standard. 
            However, (at least most) modern decoders for Motion JPEG properly handle this situation.
            This also produces a little overhead on the file size.
            </para>
      </remarks>
    </member>
    <member name="M:SharpAvi.Codecs.MotionJpegVideoEncoderWpf.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Codecs.MotionJpegVideoEncoderWpf" />.
            </summary>
      <param name="width">Frame width.</param>
      <param name="height">Frame height.</param>
      <param name="quality">
            Compression quality in the range [1..100].
            Less values mean less size and lower image quality.
            </param>
      <requires csharp="width &gt; 0" vb="width &gt; 0">width &gt; 0</requires>
      <requires csharp="height &gt; 0" vb="height &gt; 0">height &gt; 0</requires>
      <requires csharp="1 &lt;= quality &amp;&amp; !(quality &gt; 100)" vb="1 &lt;= quality AndAlso Not quality &gt; 100">1 &lt;= quality &amp;&amp; !(quality &gt; 100)</requires>
    </member>
    <member name="M:SharpAvi.Codecs.MotionJpegVideoEncoderWpf.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)">
      <summary>
            Encodes a frame.
            </summary>
      <seealso cref="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" />
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="source.Length &gt; 0" vb="source.Length &gt; 0">source.Length &gt; 0</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length" vb="0 &lt;= srcOffset AndAlso srcOffset &lt; source.Length">0 &lt;= srcOffset &amp;&amp; srcOffset &lt; source.Length</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)" vb="0 &lt;= destOffset AndAlso Not destOffset + Me.MaxEncodedSize &gt; destination.Length">0 &lt;= destOffset &amp;&amp; !(destOffset + this.MaxEncodedSize &gt; destination.Length)</requires>
      <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean@)" inheritedFromTypeName="IVideoEncoder" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
    </member>
    <member name="P:SharpAvi.Codecs.MotionJpegVideoEncoderWpf.Codec">
      <summary>Video codec.</summary>
    </member>
    <member name="P:SharpAvi.Codecs.MotionJpegVideoEncoderWpf.BitsPerPixel">
      <summary>
            Number of bits per pixel in encoded image.
            </summary>
    </member>
    <member name="P:SharpAvi.Codecs.MotionJpegVideoEncoderWpf.MaxEncodedSize">
      <summary>
            Maximum size of encoded frmae.
            </summary>
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Codecs.IVideoEncoder.get_MaxEncodedSize" inheritedFromTypeName="IVideoEncoder" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
    </member>
    <member name="T:SharpAvi.Codecs.VfwApi">
      <summary>
            Selected constants, structures and functions from Video for Windows APIs.
            </summary>
      <remarks>
            Useful for implementing stream encoding using VCM codecs.
            See Windows API documentation on the meaning and usage of all this stuff.
            </remarks>
    </member>
    <member name="T:SharpAvi.Codecs.VfwApi.BitmapInfoHeader">
      <summary>
            Corresponds to the <c>BITMAPINFOHEADER</c> structure.
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.VfwApi.CompressorInfo">
      <summary>
            Corresponds to the <c>ICINFO</c> structure.
            </summary>
    </member>
    <member name="T:SharpAvi.Codecs.VfwApi.CompressFramesInfo">
      <summary>
            Corresponds to the <c>ICCOMPRESSFRAMES</c> structure.
            </summary>
    </member>
    <member name="F:SharpAvi.Codecs.VfwApi.CompressFramesInfo.Quality">
      <summary>Quality from 0 to 10000.</summary>
    </member>
    <member name="F:SharpAvi.Codecs.VfwApi.CompressFramesInfo.KeyRate">
      <summary>Interval between key frames.</summary>
      <remarks>Equal to 1 if each frame is a key frame.</remarks>
    </member>
    <member name="F:SharpAvi.Codecs.VfwApi.CompressFramesInfo.FrameRateNumerator">
      <summary />
    </member>
    <member name="T:SharpAvi.Output.EncodingAudioStreamWrapper">
      <summary>
            Wrapper on the <see cref="T:SharpAvi.Output.IAviAudioStreamInternal" /> object to provide encoding.
            </summary>
    </member>
    <member name="M:SharpAvi.Output.EncodingAudioStreamWrapper.WriteBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Encodes and writes a block of audio data.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.ChannelCount">
      <summary>
            Number of channels in this audio stream.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.SamplesPerSecond">
      <summary>
            Sample rate, in samples per second (herz).
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.BitsPerSample">
      <summary>
            Number of bits per sample per single channel (usually 8 or 16).
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.Format">
      <summary>
            Format of the audio data.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.BytesPerSecond">
      <summary>
            Average byte rate of the stream.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.Granularity">
      <summary>
            Size in bytes of minimum item of data in the stream.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingAudioStreamWrapper.FormatSpecificData">
      <summary>
            Extra data defined by a specific format which should be added to the stream header.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.EncodingVideoStreamWrapper">
      <summary>
            Wrapper on the <see cref="T:SharpAvi.Output.IAviVideoStreamInternal" /> object to provide encoding.
            </summary>
    </member>
    <member name="M:SharpAvi.Output.EncodingVideoStreamWrapper.#ctor(SharpAvi.Output.IAviVideoStreamInternal,SharpAvi.Codecs.IVideoEncoder,System.Boolean)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Output.EncodingVideoStreamWrapper" />.
            </summary>
      <param name="baseStream">Video stream to be wrapped.</param>
      <param name="encoder">Encoder to be used.</param>
      <param name="ownsEncoder">Whether to dispose the encoder.</param>
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
      <requires csharp="encoder != null" vb="encoder &lt;&gt; Nothing">encoder != null</requires>
    </member>
    <member name="M:SharpAvi.Output.EncodingVideoStreamWrapper.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes and writes a frame.</summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingVideoStreamWrapper.Codec">
      <summary> Video codec. </summary>
    </member>
    <member name="P:SharpAvi.Output.EncodingVideoStreamWrapper.BitsPerPixel">
      <summary> Bits per pixel. </summary>
    </member>
    <member name="T:SharpAvi.Output.IAviStreamWriteHandler">
      <summary>
            Interface of an object performing actual writing for the streams.
            </summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs">
      <summary>
            Contains definitions of known FOURCC values.
            </summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.Chunks">
      <summary>
            RIFF chunk indentifiers used in AVI format.
            </summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.AviHeader">
      <summary>Main AVI header.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.StreamHeader">
      <summary>Stream header.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.StreamFormat">
      <summary>Stream format.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.StreamName">
      <summary>Stream name.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.StreamIndex">
      <summary>Stream index.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.Index1">
      <summary>Index v1.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.OpenDmlHeader">
      <summary>OpenDML header.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Chunks.Junk">
      <summary>Junk chunk.</summary>
    </member>
    <member name="M:SharpAvi.KnownFourCCs.Chunks.VideoFrame(System.Int32,System.Boolean)">
      <summary>Gets the identifier of a video frame chunk.</summary>
      <param name="streamIndex">Sequential number of the stream.</param>
      <param name="compressed">Whether stream contents is compressed.</param>
      <requires csharp="0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)" vb="0 &lt;= streamIndex AndAlso Not streamIndex &gt; 99">0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)</requires>
    </member>
    <member name="M:SharpAvi.KnownFourCCs.Chunks.AudioData(System.Int32)">
      <summary>Gets the identifier of an audio data chunk.</summary>
      <param name="streamIndex">Sequential number of the stream.</param>
      <requires csharp="0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)" vb="0 &lt;= streamIndex AndAlso Not streamIndex &gt; 99">0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)</requires>
    </member>
    <member name="M:SharpAvi.KnownFourCCs.Chunks.IndexData(System.Int32)">
      <summary>Gets the identifier of an index chunk.</summary>
      <param name="streamIndex">Sequential number of the stream.</param>
      <requires csharp="0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)" vb="0 &lt;= streamIndex AndAlso Not streamIndex &gt; 99">0 &lt;= streamIndex &amp;&amp; !(streamIndex &gt; 99)</requires>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.Lists">
      <summary>
            RIFF lists identifiers used in AVI format.
            </summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.Avi">
      <summary>Top-level AVI list.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.AviExtended">
      <summary>Top-level extended AVI list.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.Header">
      <summary>Header list.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.Stream">
      <summary>List containing stream information.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.OpenDml">
      <summary>List containing OpenDML headers.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Lists.Movie">
      <summary>List with content chunks.</summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.ListTypes">
      <summary>
            Identifiers of the list types used in RIFF format.
            </summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.ListTypes.Riff">
      <summary>Top-level list type.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.ListTypes.List">
      <summary>Non top-level list type.</summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.StreamTypes">
      <summary>
            Identifiers of the stream types used in AVI format.
            </summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.StreamTypes.Video">
      <summary>Video stream.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.StreamTypes.Audio">
      <summary>Audio stream.</summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.Codecs">
      <summary>Identifiers of various codecs.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.Uncompressed">
      <summary>Identifier used for non-compressed data.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.MotionJpeg">
      <summary>Motion JPEG.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.MicrosoftMpeg4V3">
      <summary>Microsoft MPEG-4 V3.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.MicrosoftMpeg4V2">
      <summary>Microsoft MPEG-4 V2.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.Xvid">
      <summary>Xvid MPEG-4.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.DivX">
      <summary>DivX MPEG-4.</summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.Codecs.X264">
      <summary>x264 H.264/MPEG-4 AVC.</summary>
    </member>
    <member name="T:SharpAvi.KnownFourCCs.CodecTypes">
      <summary>
            Identifiers of codec types used in Video for Windows API.
            </summary>
    </member>
    <member name="F:SharpAvi.KnownFourCCs.CodecTypes.Video">
      <summary>Video codec.</summary>
    </member>
    <member name="T:SharpAvi.Output.AviWriter">
      <summary>
            Used to write an AVI file.
            </summary>
      <remarks>
            After writing begin to any of the streams, no property changes or stream addition are allowed.
            </remarks>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.#ctor(System.String)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.Output.AviWriter" />.
            </summary>
      <param name="fileName">Path to an AVI file being written.</param>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.AddVideoStream(System.Int32,System.Int32,SharpAvi.BitsPerPixel)">
      <summary>Adds new video stream.</summary>
      <param name="width">Frame's width.</param>
      <param name="height">Frame's height.</param>
      <param name="bitsPerPixel">Bits per pixel.</param>
      <returns>Newly added video stream.</returns>
      <remarks>
            Stream is initialized to be ready for uncompressed video (bottom-up BGR) with specified parameters.
            However, properties (such as <see cref="P:SharpAvi.Output.IAviVideoStream.Codec" />) can be changed later if the stream is
            to be fed with pre-compressed data.
            </remarks>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1 local_0 = new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1();&#xD;&#xA;        local_0.width = width;&#xD;&#xA;        local_0.height = height;&#xD;&#xA;        local_0.bitsPerPixel = bitsPerPixel;&#xD;&#xA;        local_0.&lt;&gt;4__this = this;&#xD;&#xA;    }&#xD;&#xA;    return local_0.width &gt; 0; })()" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1 local_0 = New SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    local_0.width = width&#xD;&#xA;    local_0.height = height&#xD;&#xA;    local_0.bitsPerPixel = bitsPerPixel&#xD;&#xA;    local_0.&lt;&gt;4__this = Me&#xD;&#xA;    return local_0.width &gt; 0; })()">(() =&gt; {
    {
        SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1 local_0 = new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass1();
        local_0.width = width;
        local_0.height = height;
        local_0.bitsPerPixel = bitsPerPixel;
        local_0.&lt;&gt;4__this = this;
    }
    return local_0.width &gt; 0; })()</requires>
      <requires csharp="local_0.height &gt; 0" vb="local_0.height &gt; 0">local_0.height &gt; 0</requires>
      <requires csharp="IsDefined(typeof(SharpAvi.BitsPerPixel), (object)local_0.bitsPerPixel)" vb="IsDefined(typeof(SharpAvi.BitsPerPixel), ((Object)local_0.bitsPerPixel))">System.Enum.IsDefined(typeof(SharpAvi.BitsPerPixel), (object)local_0.bitsPerPixel)</requires>
      <requires csharp="this.Streams.Count &lt; 100" vb="Me.Streams.Count &lt; 100">this.Streams.Count &lt; 100</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.AddEncodingVideoStream(SharpAvi.Codecs.IVideoEncoder,System.Boolean,System.Int32,System.Int32)">
      <summary>Adds new encoding video stream.</summary>
      <param name="encoder">Encoder to be used.</param>
      <param name="ownsEncoder">Whether encoder should be disposed with the writer.</param>
      <param name="width">Frame's width.</param>
      <param name="height">Frame's height.</param>
      <returns>Newly added video stream.</returns>
      <remarks>
        <para>
            Stream is initialized to be to be encoded with the specified encoder.
            Method <see cref="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" /> expects data in the same format as encoders,
            that is top-down BGR32 bitmap. It is passed to the encoder and the encoded result is written
            to the stream.
            Parameters <c>isKeyFrame</c> and <c>length</c> are ignored by encoding streams,
            as encoders determine on their own which frames are keys, and the size of input bitmaps is fixed.
            </para>
        <para>
            Properties <see cref="P:SharpAvi.Output.IAviVideoStream.Codec" /> and <see cref="P:SharpAvi.Output.IAviVideoStream.BitsPerPixel" /> 
            are defined by the encoder, and cannot be modified.
            </para>
      </remarks>
      <requires csharp="new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass4(){&#xD;&#xA;    encoder = encoder, &#xD;&#xA;    ownsEncoder = ownsEncoder, &#xD;&#xA;    width = width, &#xD;&#xA;    height = height, &#xD;&#xA;    &lt;&gt;4__this = this, &#xD;&#xA;}.encoder != null" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass4 local_0_prime = New SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass4();&#xD;&#xA;    (local_0_prime.encoder = encoder)&#xD;&#xA;    (local_0_prime.ownsEncoder = ownsEncoder)&#xD;&#xA;    (local_0_prime.width = width)&#xD;&#xA;    (local_0_prime.height = height)&#xD;&#xA;    (local_0_prime.&lt;&gt;4__this = Me)&#xD;&#xA;    return local_0_prime; })().encoder &lt;&gt; Nothing">new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass4(){
    encoder = encoder, 
    ownsEncoder = ownsEncoder, 
    width = width, 
    height = height, 
    &lt;&gt;4__this = this, 
}.encoder != null</requires>
      <requires csharp="this.Streams.Count &lt; 100" vb="Me.Streams.Count &lt; 100">this.Streams.Count &lt; 100</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.AddAudioStream(System.Int32,System.Int32,System.Int32)">
      <summary>Adds new audio stream.</summary>
      <param name="channelCount">Number of channels.</param>
      <param name="samplesPerSecond">Sample rate.</param>
      <param name="bitsPerSample">Bits per sample (per single channel).</param>
      <returns>Newly added audio stream.</returns>
      <remarks>
            Stream is initialized to be ready for uncompressed audio (PCM) with specified parameters.
            However, properties (such as <see cref="P:SharpAvi.Output.IAviAudioStream.Format" />) can be changed later if the stream is
            to be fed with pre-compressed data.
            </remarks>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7 local_0 = new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7();&#xD;&#xA;        local_0.channelCount = channelCount;&#xD;&#xA;        local_0.samplesPerSecond = samplesPerSecond;&#xD;&#xA;        local_0.bitsPerSample = bitsPerSample;&#xD;&#xA;        local_0.&lt;&gt;4__this = this;&#xD;&#xA;    }&#xD;&#xA;    return local_0.channelCount &gt; 0; })()" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7 local_0 = New SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7();&#xD;&#xA;    local_0.channelCount = channelCount&#xD;&#xA;    local_0.samplesPerSecond = samplesPerSecond&#xD;&#xA;    local_0.bitsPerSample = bitsPerSample&#xD;&#xA;    local_0.&lt;&gt;4__this = Me&#xD;&#xA;    return local_0.channelCount &gt; 0; })()">(() =&gt; {
    {
        SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7 local_0 = new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClass7();
        local_0.channelCount = channelCount;
        local_0.samplesPerSecond = samplesPerSecond;
        local_0.bitsPerSample = bitsPerSample;
        local_0.&lt;&gt;4__this = this;
    }
    return local_0.channelCount &gt; 0; })()</requires>
      <requires csharp="local_0.samplesPerSecond &gt; 0" vb="local_0.samplesPerSecond &gt; 0">local_0.samplesPerSecond &gt; 0</requires>
      <requires csharp="local_0.bitsPerSample &gt; 0 &amp;&amp; local_0.bitsPerSample % 8 == 0" vb="local_0.bitsPerSample &gt; 0 AndAlso local_0.bitsPerSample Mod 8 = 0">local_0.bitsPerSample &gt; 0 &amp;&amp; local_0.bitsPerSample % 8 == 0</requires>
      <requires csharp="this.Streams.Count &lt; 100" vb="Me.Streams.Count &lt; 100">this.Streams.Count &lt; 100</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.AddEncodingAudioStream(SharpAvi.Codecs.IAudioEncoder,System.Boolean)">
      <summary>Adds new encoding audio stream.</summary>
      <param name="encoder">Encoder to be used.</param>
      <param name="ownsEncoder">Whether encoder should be disposed with the writer.</param>
      <returns>Newly added audio stream.</returns>
      <remarks>
        <para>
            Stream is initialized to be to be encoded with the specified encoder.
            Method <see cref="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" /> expects data in the same format as encoder (see encoder's docs). 
            The data is passed to the encoder and the encoded result is written to the stream.
            </para>
        <para>
            The encoder defines the following properties of the stream:
            <see cref="P:SharpAvi.Output.IAviAudioStream.ChannelCount" />, <see cref="P:SharpAvi.Output.IAviAudioStream.SamplesPerSecond" />,
            <see cref="P:SharpAvi.Output.IAviAudioStream.BitsPerSample" />, <see cref="P:SharpAvi.Output.IAviAudioStream.BytesPerSecond" />,
            <see cref="P:SharpAvi.Output.IAviAudioStream.Granularity" />, <see cref="P:SharpAvi.Output.IAviAudioStream.Format" />,
            <see cref="P:SharpAvi.Output.IAviAudioStream.FormatSpecificData" />.
            These properties cannot be modified.
            </para>
      </remarks>
      <requires csharp="new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClassa(){&#xD;&#xA;    encoder = encoder, &#xD;&#xA;    ownsEncoder = ownsEncoder, &#xD;&#xA;    &lt;&gt;4__this = this, &#xD;&#xA;}.encoder != null" vb="(() =&gt; {&#xD;&#xA;    SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClassa local_0_prime = New SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClassa();&#xD;&#xA;    (local_0_prime.encoder = encoder)&#xD;&#xA;    (local_0_prime.ownsEncoder = ownsEncoder)&#xD;&#xA;    (local_0_prime.&lt;&gt;4__this = Me)&#xD;&#xA;    return local_0_prime; })().encoder &lt;&gt; Nothing">new SharpAvi.Output.AviWriter.&lt;&gt;c__DisplayClassa(){
    encoder = encoder, 
    ownsEncoder = ownsEncoder, 
    &lt;&gt;4__this = this, 
}.encoder != null</requires>
      <requires csharp="this.Streams.Count &lt; 100" vb="Me.Streams.Count &lt; 100">this.Streams.Count &lt; 100</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.Close">
      <summary>
            Closes the writer and AVI file itself.
            </summary>
    </member>
    <member name="P:SharpAvi.Output.AviWriter.FramesPerSecond">
      <summary>Frame rate.</summary>
      <remarks>
            The value of the property is rounded to 3 fractional digits.
            Default value is <c>1</c>.
            </remarks>
      <setter>
        <requires csharp="value &gt; new decimal(0)" vb="value &gt; New Decimal(0) ">value &gt; new decimal(0)</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviWriter.EmitIndex1">
      <summary>
            Whether to emit index used in AVI v1 format.
            </summary>
      <remarks>
            By default, only index conformant to OpenDML AVI extensions (AVI v2) is emitted. 
            Presence of v1 index may improve the compatibility of generated AVI files with certain software, 
            especially when there are multiple streams.
            </remarks>
    </member>
    <member name="P:SharpAvi.Output.AviWriter.Streams">
      <summary>AVI streams that have been added so far.</summary>
    </member>
    <member name="T:SharpAvi.FourCC">
      <summary>
            Represents four character code (FOURCC).
            </summary>
      <remarks>
            FOURCCs are used widely across AVI format.
            </remarks>
    </member>
    <member name="M:SharpAvi.FourCC.#ctor(System.UInt32)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.FourCC" /> with an integer value.
            </summary>
      <param name="value">Integer value of FOURCC.</param>
    </member>
    <member name="M:SharpAvi.FourCC.#ctor(System.String)">
      <summary>
            Creates a new instance of <see cref="T:SharpAvi.FourCC" /> with a string value.
            </summary>
      <param name="value">
            String value of FOURCC.
            Should be not longer than 4 characters, all of them are printable ASCII characters.
            </param>
      <remarks>
            If the value of <paramref name="value" /> is shorter than 4 characters, it is right-padded with spaces.
            </remarks>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <requires csharp="value.Length &lt;= 4" vb="value.Length &lt;= 4">value.Length &lt;= 4</requires>
      <requires csharp="for all c in value &#xD;&#xA;{&#xD;&#xA;    if (' ' &lt;= c)&#xD;&#xA;    {&#xD;&#xA;        return c &lt;= '~';&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;" vb="for all c in value &lt;unprintable lambda&gt;">for all c in value 
{
    if (' ' &lt;= c)
    {
        return c &lt;= '~';

    }
    return false;

}
</requires>
    </member>
    <member name="M:SharpAvi.FourCC.ToString">
      <summary>
            Returns string representation of this instance.
            </summary>
      <returns>
            String value if all bytes are printable ASCII characters. Otherwise, the hexadecimal representation of integer value.
            </returns>
      <ensures inheritedFrom="M:System.ValueType.ToString" inheritedFromTypeName="ValueType" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.FourCC.GetHashCode">
      <summary>
            Gets hash code of this instance.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.Equals(System.Object)">
      <summary>
            Determines whether this instance is equal to other object.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Implicit(System.UInt32)~SharpAvi.FourCC">
      <summary>
            Converts an integer value to <see cref="T:SharpAvi.FourCC" />.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Implicit(System.String)~SharpAvi.FourCC">
      <summary>
            Converts a string value to <see cref="T:SharpAvi.FourCC" />.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Explicit(SharpAvi.FourCC)~System.UInt32">
      <summary>
            Gets the integer value of <see cref="T:SharpAvi.FourCC" /> instance.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Explicit(SharpAvi.FourCC)~System.String">
      <summary>
            Gets the string value of <see cref="T:SharpAvi.FourCC" /> instance.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Equality(SharpAvi.FourCC,SharpAvi.FourCC)">
      <summary>
            Determines whether two instances of <see cref="T:SharpAvi.FourCC" /> are equal.
            </summary>
    </member>
    <member name="M:SharpAvi.FourCC.op_Inequality(SharpAvi.FourCC,SharpAvi.FourCC)">
      <summary>
            Determines whether two instances of <see cref="T:SharpAvi.FourCC" /> are not equal.
            </summary>
    </member>
    <member name="T:SharpAvi.BitsPerPixel">
      <summary>Number of bits per pixel.</summary>
    </member>
    <member name="F:SharpAvi.BitsPerPixel.Bpp16">
      <summary>16 bits per pixel.</summary>
    </member>
    <member name="F:SharpAvi.BitsPerPixel.Bpp24">
      <summary>24 bits per pixel.</summary>
    </member>
    <member name="F:SharpAvi.BitsPerPixel.Bpp32">
      <summary>32 bits per pixel.</summary>
    </member>
    <member name="T:SharpAvi.Output.SequentialInvoker">
      <summary>
            Serializes synchronous and asynchronous invocations in one queue.
            </summary>
    </member>
    <member name="T:SharpAvi.Output.RiffItem">
      <summary>
            Item of a RIFF file - either list or chunk.
            </summary>
    </member>
    <member name="M:SharpAvi.Codecs.BitmapUtils.Bgr32ToBgr24(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="srcOffset &gt;= 0" vb="srcOffset &gt;= 0">srcOffset &gt;= 0</requires>
      <requires csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires csharp="destOffset &gt;= 0" vb="destOffset &gt;= 0">destOffset &gt;= 0</requires>
      <requires csharp="pixelCount &gt;= 0" vb="pixelCount &gt;= 0">pixelCount &gt;= 0</requires>
      <requires csharp="srcOffset + 4 * pixelCount &lt;= source.Length" vb="srcOffset + 4 * pixelCount &lt;= source.Length">srcOffset + 4 * pixelCount &lt;= source.Length</requires>
      <requires csharp="destOffset + 3 * pixelCount &lt;= destination.Length" vb="destOffset + 3 * pixelCount &lt;= destination.Length">destOffset + 3 * pixelCount &lt;= destination.Length</requires>
    </member>
    <member name="M:SharpAvi.Codecs.BitmapUtils.FlipVertical(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <requires csharp="height &gt;= 0" vb="height &gt;= 0">height &gt;= 0</requires>
      <requires csharp="stride &gt; 0" vb="stride &gt; 0">stride &gt; 0</requires>
      <requires csharp="srcOffset + stride * height &lt;= source.Length" vb="srcOffset + stride * height &lt;= source.Length">srcOffset + stride * height &lt;= source.Length</requires>
      <requires csharp="destOffset + stride * height &lt;= destination.Length" vb="destOffset + stride * height &lt;= destination.Length">destOffset + stride * height &lt;= destination.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.AviWriter.AddStream``1(System.Func{System.Int32,``0})">
      <requires csharp="streamFactory != null" vb="streamFactory &lt;&gt; Nothing">streamFactory != null</requires>
      <requires csharp="this.Streams.Count &lt; 100" vb="Me.Streams.Count &lt; 100">this.Streams.Count &lt; 100</requires>
    </member>
    <member name="M:SharpAvi.Output.AviVideoStream.#ctor(System.Int32,SharpAvi.Output.IAviStreamWriteHandler,System.Int32,System.Int32,SharpAvi.BitsPerPixel)">
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="writeHandler != null" vb="writeHandler &lt;&gt; Nothing">writeHandler != null</requires>
      <requires csharp="width &gt; 0" vb="width &gt; 0">width &gt; 0</requires>
      <requires csharp="height &gt; 0" vb="height &gt; 0">height &gt; 0</requires>
      <requires csharp="IsDefined(typeof(SharpAvi.BitsPerPixel), (object)bitsPerPixel)" vb="IsDefined(typeof(SharpAvi.BitsPerPixel), ((Object)bitsPerPixel))">System.Enum.IsDefined(typeof(SharpAvi.BitsPerPixel), (object)bitsPerPixel)</requires>
    </member>
    <member name="M:SharpAvi.Output.AviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.AviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
      <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviVideoStream.EndWriteFrame(System.IAsyncResult)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.EndWriteFrame(System.IAsyncResult)" inheritedFromTypeName="IAviVideoStream" csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.AviVideoStream.Width">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_Width" inheritedFromTypeName="IAviVideoStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_Width(System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviVideoStream.Height">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_Height" inheritedFromTypeName="IAviVideoStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_Height(System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviVideoStream.BitsPerPixel">
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_BitsPerPixel(SharpAvi.BitsPerPixel)" inheritedFromTypeName="IAviVideoStream" csharp="IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)" vb="IsDefined(typeof(SharpAvi.BitsPerPixel), ((Object)value))">System.Enum.IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviVideoStream.FramesWritten">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_FramesWritten" inheritedFromTypeName="IAviVideoStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.AsyncVideoStreamWrapper.#ctor(SharpAvi.Output.IAviVideoStreamInternal)">
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
    </member>
    <member name="M:SharpAvi.Output.RiffWriterExtensions.OpenChunk(System.IO.BinaryWriter,SharpAvi.FourCC,System.Int32)">
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <requires csharp="expectedDataSize &lt;= 2147483639" vb="expectedDataSize &lt;= 2147483639">expectedDataSize &lt;= 2147483639</requires>
    </member>
    <member name="M:SharpAvi.Output.RiffWriterExtensions.OpenList(System.IO.BinaryWriter,SharpAvi.FourCC)">
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
    </member>
    <member name="M:SharpAvi.Output.RiffWriterExtensions.OpenList(System.IO.BinaryWriter,SharpAvi.FourCC,SharpAvi.FourCC)">
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
    </member>
    <member name="M:SharpAvi.Output.RiffWriterExtensions.SkipBytes(System.IO.BinaryWriter,System.Int32)">
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
    </member>
    <member name="M:SharpAvi.Output.AudioStreamWrapperBase.#ctor(SharpAvi.Output.IAviAudioStreamInternal)">
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
    </member>
    <member name="M:SharpAvi.Output.AudioStreamWrapperBase.WriteBlock(System.Byte[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.AudioStreamWrapperBase.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
      <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AudioStreamWrapperBase.EndWriteBlock(System.IAsyncResult)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.EndWriteBlock(System.IAsyncResult)" inheritedFromTypeName="IAviAudioStream" csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.ChannelCount">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_ChannelCount" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_ChannelCount(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.SamplesPerSecond">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_SamplesPerSecond" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_SamplesPerSecond(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.BitsPerSample">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BitsPerSample" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_BitsPerSample(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.BytesPerSecond">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BytesPerSecond" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_BytesPerSecond(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.Granularity">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_Granularity" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_Granularity(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.BlocksWritten">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BlocksWritten" inheritedFromTypeName="IAviAudioStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Output.AudioStreamWrapperBase.Index">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviStream.get_Index" inheritedFromTypeName="IAviStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.EncodingAudioStreamWrapper.#ctor(SharpAvi.Output.IAviAudioStreamInternal,SharpAvi.Codecs.IAudioEncoder,System.Boolean)">
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
      <requires csharp="encoder != null" vb="encoder &lt;&gt; Nothing">encoder != null</requires>
    </member>
    <member name="M:SharpAvi.Output.AviAudioStream.#ctor(System.Int32,SharpAvi.Output.IAviStreamWriteHandler,System.Int32,System.Int32,System.Int32)">
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="writeHandler != null" vb="writeHandler &lt;&gt; Nothing">writeHandler != null</requires>
    </member>
    <member name="M:SharpAvi.Output.AviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.WriteBlock(System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.AviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="data != null" vb="data &lt;&gt; Nothing">data != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="startIndex + length &lt;= data.Length" vb="startIndex + length &lt;= data.Length">startIndex + length &lt;= data.Length</requires>
      <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.BeginWriteBlock(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviAudioStream" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.AviAudioStream.EndWriteBlock(System.IAsyncResult)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.EndWriteBlock(System.IAsyncResult)" inheritedFromTypeName="IAviAudioStream" csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.ChannelCount">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_ChannelCount" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_ChannelCount(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.SamplesPerSecond">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_SamplesPerSecond" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_SamplesPerSecond(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.BitsPerSample">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BitsPerSample" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_BitsPerSample(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.BytesPerSecond">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BytesPerSecond" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_BytesPerSecond(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.Granularity">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_Granularity" inheritedFromTypeName="IAviAudioStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviAudioStream.set_Granularity(System.Int32)" inheritedFromTypeName="IAviAudioStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.AviAudioStream.BlocksWritten">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviAudioStream.get_BlocksWritten" inheritedFromTypeName="IAviAudioStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.VideoStreamWrapperBase.#ctor(SharpAvi.Output.IAviVideoStreamInternal)">
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
    </member>
    <member name="M:SharpAvi.Output.VideoStreamWrapperBase.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.WriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
    </member>
    <member name="M:SharpAvi.Output.VideoStreamWrapperBase.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="frameData != null" vb="frameData &lt;&gt; Nothing">frameData != null</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex &gt;= 0" vb="startIndex &gt;= 0">startIndex &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="length &gt;= 0" vb="length &gt;= 0">length &gt;= 0</requires>
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="startIndex + length &lt;= frameData.Length" vb="startIndex + length &lt;= frameData.Length">startIndex + length &lt;= frameData.Length</requires>
      <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.BeginWriteFrame(System.Boolean,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" inheritedFromTypeName="IAviVideoStream" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:SharpAvi.Output.VideoStreamWrapperBase.EndWriteFrame(System.IAsyncResult)">
      <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.EndWriteFrame(System.IAsyncResult)" inheritedFromTypeName="IAviVideoStream" csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="P:SharpAvi.Output.VideoStreamWrapperBase.Width">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_Width" inheritedFromTypeName="IAviVideoStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_Width(System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.VideoStreamWrapperBase.Height">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_Height" inheritedFromTypeName="IAviVideoStream" csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_Height(System.Int32)" inheritedFromTypeName="IAviVideoStream" csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.VideoStreamWrapperBase.BitsPerPixel">
      <setter>
        <requires inheritedFrom="M:SharpAvi.Output.IAviVideoStream.set_BitsPerPixel(SharpAvi.BitsPerPixel)" inheritedFromTypeName="IAviVideoStream" csharp="IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)" vb="IsDefined(typeof(SharpAvi.BitsPerPixel), ((Object)value))">System.Enum.IsDefined(typeof(SharpAvi.BitsPerPixel), (object)value)</requires>
      </setter>
    </member>
    <member name="P:SharpAvi.Output.VideoStreamWrapperBase.FramesWritten">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviVideoStream.get_FramesWritten" inheritedFromTypeName="IAviVideoStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:SharpAvi.Output.VideoStreamWrapperBase.Index">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviStream.get_Index" inheritedFromTypeName="IAviStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.SequentialInvoker.EndInvoke(System.IAsyncResult)">
      <requires csharp="asyncResult != null" vb="asyncResult &lt;&gt; Nothing">asyncResult != null</requires>
    </member>
    <member name="M:SharpAvi.Output.SequentialInvoker.AsyncInvocationInfo.#ctor(SharpAvi.Output.SequentialInvoker,System.Action,System.AsyncCallback,System.Object)">
      <requires csharp="owner != null" vb="owner &lt;&gt; Nothing">owner != null</requires>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="P:SharpAvi.Output.SequentialInvoker.AsyncInvocationInfo.AsyncWaitHandle">
      <getter>
        <ensures inheritedFrom="M:System.IAsyncResult.get_AsyncWaitHandle" inheritedFromTypeName="IAsyncResult" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:SharpAvi.Output.AsyncAudioStreamWrapper.#ctor(SharpAvi.Output.IAviAudioStreamInternal)">
      <requires csharp="baseStream != null" vb="baseStream &lt;&gt; Nothing">baseStream != null</requires>
    </member>
    <member name="M:SharpAvi.Output.RiffItem.#ctor(System.Int64,System.Int32)">
      <requires csharp="dataStart &gt;= (long)8" vb="dataStart &gt;= ((Long )8)">dataStart &gt;= (long)8</requires>
      <requires csharp="dataSize &lt;= 2147483639" vb="dataSize &lt;= 2147483639">dataSize &lt;= 2147483639</requires>
    </member>
    <member name="P:SharpAvi.Output.RiffItem.DataSize">
      <setter>
        <requires csharp="value &gt;= 0" vb="value &gt;= 0">value &gt;= 0</requires>
        <requires csharp="this.DataSize &lt; 0" vb="Me.DataSize &lt; 0">this.DataSize &lt; 0</requires>
      </setter>
    </member>
    <member name="M:SharpAvi.Output.AviStreamBase.#ctor(System.Int32)">
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
    </member>
    <member name="P:SharpAvi.Output.AviStreamBase.Index">
      <getter>
        <ensures inheritedFrom="M:SharpAvi.Output.IAviStream.get_Index" inheritedFromTypeName="IAviStream" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
  </members>
</doc>